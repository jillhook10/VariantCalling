# -*- coding: utf-8 -*-
"""CRISPR Final Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xxg_NsYpHNYuOzRexiaDPaPGSsRIcDz_
"""

#mount drive
from google.colab import drive
drive.mount('/content/drive')

###### CRISPR sample

!gdown 1-96T1PZKA_FQeD_ZK5z9USaHLP3jVdRO
!gdown 1-BXGr3XVGtd9Tx6PCHSp4hepK41GGCTS

### To make thinngs faster for the student, here is the indexed mouse genome, mm10.
### You have to donwload it and decompressed it, you will get both the fasta and the BWT'ed files. Note all have same prefix Mouse<.files>.
### Next semester we will cover how specialized computers are often used to solve this aligmnet problems faster.

!gdown 1a8CP4P5zkzIBiw1EleqJiSwDW0VZcAar

!apt install bwa
!apt install samtools
!apt install bcftools
!apt-get update
!apt-get install -y seqtk

!tar -xvzf MM10.tar.gz

!ls MM10

#isolating only chromosome 2 for analysis
!samtools faidx MM10/Mouse.fasta chr2 > chr2.fasta

#Indexing chromosme 2
!bwa index chr2.fasta

# aligning sequencing reads to a reference genome.
!bwa mem chr2.fasta CRISPR.R1.fastq CRISPR.R2.fastq > aligned_reads_chr2.sam

#converting to a BAM file, and sort
!samtools view -Sb aligned_reads_chr2.sam > aligned_reads_chr2.bam
!samtools sort aligned_reads_chr2.bam -o sorted_reads_chr2.bam

#indexing the sorted file
!samtools index sorted_reads_chr2.bam

#Identified genetic variations compared to the reference genome
!bcftools mpileup -Ou -f chr2.fasta sorted_reads_chr2.bam | bcftools call -mv -Oz -o variants_chr2.vcf.gz #identify potential variants (SNPs, indels) in your aligned reads

!bcftools annotate -a MM10/Mouse.gtf -c CHROM,POS,REF,ALT,QUAL,DP -Oz -o annotated_variants_chr2.vcf.gz filtered_variants_chr2.vcf.gz

#improving the accuracy by removing low-quality reads
!bcftools filter -i 'QUAL>20 && DP>10' variants_chr2.vcf.gz -Oz -o filtered_variants_chr2.vcf.gz

!pip install cyvcf2

!bcftools view variants_chr2.vcf.gz -Ov > filtered_variants_chr2.vcf

import cyvcf2
import pandas as pd

vcf_path = 'filtered_variants_chr2.vcf'

# Convert VCF to TSV
with open('output.tsv', 'w') as file:
    for variant in cyvcf2.VCF(vcf_path):
        genotype = variant.gt_types[0]
        data_string = f"{variant.CHROM}\t{variant.POS}\t{variant.ID}\t{variant.REF}\t{','.join(variant.ALT)}\t{variant.QUAL}\t{variant.FILTER}\t{genotype}\n"
        file.write(data_string)

# Load TSV into DataFrame
columns = ['CHROM', 'POS', 'ID', 'REF', 'ALT', 'QUAL', 'FILTER', 'GENOTYPE']
df = pd.read_csv("output.tsv", delimiter="\t", header=None, names=columns)
df

df['QUAL'] = pd.to_numeric(df['QUAL'], errors='coerce')

filtered_df = df[df['QUAL'] > 60]
filtered_df

#Identifying Intended Mutations:
df = pd.read_csv("output.tsv", delimiter="\t", header=None, names=columns)
variants_df = pd.read_csv("output.tsv", delimiter="\t", header=None, names=columns)

intended_mutations_df = df[df['POS'].isin(intended_sites)]
intended_mutations_df

#Detecting Off-Target Effects:
off_target_mutations_df = variants_df[~variants_df['POS'].isin(intended_sites)]
off_target_mutations_df

#Summarizing Off-Target Mutations
summary_df = off_target_mutations_df.groupby('CHROM')['POS'].agg(['count', 'nunique'])
summary_df.columns = ['Mutation Count', 'Genotype Count']
summary_df

import matplotlib.pyplot as plt

plt.hist(off_target_mutations_df['POS'], bins=50)
plt.xlabel('Genomic Position')
plt.ylabel('Mutation Count')
plt.title('Distribution of Off-Target Mutations on Chromosome 2')
plt.show()

off_target_mutations_df

off_target_summary_df = off_target_mutations_df.groupby('CHROM').agg(
    mutation_count=('POS', 'count'),
    genotype_counts=('GENOTYPE', 'value_counts')
)
off_target_summary_df